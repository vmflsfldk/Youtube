CREATE TABLE artist_names (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    artist_id BIGINT NOT NULL,
    language_code VARCHAR(10) NOT NULL,
    value_text TEXT NOT NULL,
    normalized_value TEXT NOT NULL,
    CONSTRAINT fk_artist_names_artist FOREIGN KEY (artist_id) REFERENCES artists (id) ON DELETE CASCADE
);

CREATE INDEX idx_artist_names_normalized_value ON artist_names (normalized_value);

CREATE TABLE original_composer_names (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    video_id BIGINT,
    clip_id BIGINT,
    language_code VARCHAR(10) NOT NULL,
    value_text TEXT NOT NULL,
    normalized_value TEXT NOT NULL,
    CONSTRAINT fk_original_composer_names_video FOREIGN KEY (video_id) REFERENCES videos (id) ON DELETE CASCADE,
    CONSTRAINT fk_original_composer_names_clip FOREIGN KEY (clip_id) REFERENCES clips (id) ON DELETE CASCADE,
    CONSTRAINT chk_original_composer_parent CHECK ((video_id IS NOT NULL) <> (clip_id IS NOT NULL))
);

CREATE INDEX idx_original_composer_names_normalized_value ON original_composer_names (normalized_value);

CREATE TABLE song_titles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    video_id BIGINT,
    clip_id BIGINT,
    language_code VARCHAR(10) NOT NULL,
    value_text TEXT NOT NULL,
    normalized_value TEXT NOT NULL,
    CONSTRAINT fk_song_titles_video FOREIGN KEY (video_id) REFERENCES videos (id) ON DELETE CASCADE,
    CONSTRAINT fk_song_titles_clip FOREIGN KEY (clip_id) REFERENCES clips (id) ON DELETE CASCADE,
    CONSTRAINT chk_song_titles_parent CHECK ((video_id IS NOT NULL) <> (clip_id IS NOT NULL))
);

CREATE INDEX idx_song_titles_normalized_value ON song_titles (normalized_value);
